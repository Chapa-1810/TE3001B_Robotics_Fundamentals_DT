pause on
nh = ros2node("/jacobian_matlab");
jointsub = ros2subscriber(nh,"/joint_states","sensor_msgs/JointState");
lvelsub = ros2subscriber(nh,"/left_ee_vel","geometry_msgs/Twist");
rvelsub = ros2subscriber(nh,"/right_ee_vel","geometry_msgs/Twist");
uvelsub = ros2subscriber(nh,"/under_ee_vel","geometry_msgs/Twist");
jointpub = ros2publisher(nh, "/joint_vel","geometry_msgs/Twist");

%%

rob = importrobot('triple_3dof.urdf');
hom = homeConfiguration(rob);

%%

%show(rob)
%hom = homeConfiguration(rob);

%field1 = 'JointName';  value1 = {'joint1','joint2','joint3'};
%field2 = 'JointPosition';  value2 = {0,0,0};

%s = struct(field1,value1,field2,value2);

velmsg = ros2message("geometry_msgs/Twist");

while 1
    jointData = receive(jointsub);
    lvelData = receive(lvelsub);
    rvelData = receive(rvelsub);
    uvelData = receive(uvelsub);
    lJ = geometricJacobian(rob,hom, "L_link2")
    rJ = geometricJacobian(rob,hom, "R_link2")
    uJ = geometricJacobian(rob,hom, "U_link2")
    velData = receive(velsub);
    
    vel = [velData.linear.x; 
           velData.linear.y; 
           velData.linear.z;
           velData.angular.x;
           velData.angular.y;
           velData.angular.z];

    Jinv = pinv(geometricJacobian(rob,s,'link2'));

    jvel = Jinv*vel;

    velmsg.linear.x = jvel(1);
    velmsg.linear.y = jvel(2);
    velmsg.linear.z = jvel(3);

    send(jointpub, velmsg)

    %s(1).JointPosition = i;
    %s(2).JointPosition = i;
    %s(3).JointPosition = i;
    %pause(1)
    %geometricJacobian(rob,s,'link2')
end

%show(rob,s)